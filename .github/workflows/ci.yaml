name: Deploy to Production
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest

    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: file
      QUEUE_CONNECTION: database
      SESSION_DRIVER: file

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, bcmath, pdo_mysql, xml, curl, tokenizer, json, mysql
          coverage: none

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --no-progress --no-suggest --optimize-autoloader

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Run Migration
        run: php artisan migrate -v  --force
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Node dependencies
        run: npm install

      - name: Build frontend assets
        run: npm run build

      #      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      #        env:
      #          DB_CONNECTION: mysql
      #          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
      #        run: php artisan test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t divawidia2001/vehicle-rental:latest .

      - name: Log in to docker hub
        run: docker login

      - name: Push docker image to docker hub
        run: docker push divawidia2001/vehicle-rental:latest

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST  }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd /var/www
            docker compose pull
            docker compose down
            docker compose up -d --build
            docker compose exec vehicle-rental-app php artisan migrate --force
            docker compose exec vehicle-rental-app php artisan optimize:clear
            docker compose exec vehicle-rental-app php artisan config:cache
            docker compose exec vehicle-rental-app php artisan event:cache
            docker compose exec vehicle-rental-app php artisan route:cache
            docker compose exec vehicle-rental-app php artisan view:cache
            docker image prune -a -f
